Simple Scenario


#Scenario: Login Successful

#Given I am in the login page of the ParaBank
#When I enter valid credential 
#Then I should be navigate  to the overview page 

Method definition

 @When("I enter valid credential") public void i_enter_valid_credential()
 throws InterruptedException {
 driver.findElement(By.name("username")).sendKeys("seleniumtest");
 driver.findElement(By.name("password")).sendKeys("seleniumtest");
 driver.findElement(By.xpath("//input[@class='button']")).click();
 Thread.sleep(2000);
	 
=================================================================

Parameterize function using scenario outline and Examples

Scenario Outline: Login Successful
Given I am in the login page of the ParaBank
When  I enter valid <username> and <password>
Then I should be navigate  to the overview page 

Examples:
|username|password|
|"seleniumtest"|"seleniumtest"|
|"tautester"| "password"|


Method definition

@When("I enter valid {string} and {string}")
	public void i_enter_valid_credential(String username, String password) throws InterruptedException {
	   driver.findElement(By.name("username")).sendKeys(username);
	   driver.findElement(By.name("password")).sendKeys(password);
	   driver.findElement(By.xpath("//input[@class='button']")).click();
	   Thread.sleep(2000);
========================================================

Parameterise function using Datatables
import io.cucumber.datatable.DataTable;
used when required to tesst application with single DataSet

Scenario: Login Successful
Given I am in the login page of the ParaBank
When  I enter valid credential
|"seleniumtest"|"seleniumtest"|
Then I should be navigate  to the overview page 


@When("I enter valid credential")
	public void i_enter_valid_credential(DataTable table) throws InterruptedException {
		List<String> logindata= table.asList();
	   driver.findElement(By.name("username")).sendKeys(logindata.get(0));
	   driver.findElement(By.name("password")).sendKeys(logindata.get(1));
	   driver.findElement(By.xpath("//input[@class='button']")).click();
	   Thread.sleep(2000);
	   
======================================================================================

Hooks: block of code runs before after each scenario /steps
@Before @After



Scenario Outline: Login Successful
Given I am in the login page of the ParaBank
When  I enter valid <username> and <password>
Then I should be navigate  to the overview page 

Examples:
|username|password|
|"seleniumtest"|"seleniumtest"|

@When("I enter valid {string} and {string}")
	public void i_enter_valid_credential(String username, String password) throws InterruptedException {
	   driver.findElement(By.name("username")).sendKeys(username);
	   driver.findElement(By.name("password")).sendKeys(password);
	   driver.findElement(By.xpath("//input[@class='button']")).click();
	   Thread.sleep(2000);
	   



===========================================================================================

Dependency Injection: if we have to share states between two steps we can use dependency injection
for dependency injection we will use cucumber pico container and we will add dependency in maven pom.xml
To pass the data across all the steps  we will create a baseClass.

<dependency>
        <groupId>io.cucumber</groupId>
        <artifactId>cucumber-picocontainer</artifactId>
        <version>${cucumber.version}</version>
        <scope>test</scope>
    </dependency>

==================================================================================================
Parallel Execution: required mvn surefire plugin
	<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
				<configuration>
					<parallel>methods</parallel>
					<useUnlimitedThreads>true</useUnlimitedThreads>
					<testFailureIgnore>true</testFailureIgnore>
				</configuration>
			</plugin>
			

======================================================================================================

Cucumber Reporting: Cucumber pretty format reporting   https://github.com/damianszczepanik/maven-cucumber-reporting
and execute  project with command mvn verify

 
<plugin>
				<groupId>net.masterthought</groupId>
				<artifactId>maven-cucumber-reporting</artifactId>
				<version>4.11.2</version>
				<executions>
					<execution>
						<id>execution</id>
						<phase>verify</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<projectName>cucumber-jvm-example</projectName>
							<!-- optional, per documentation set this to "true" to bypass generation 
								of Cucumber Reports entirely, defaults to false if not specified -->
							<skip>false</skip>
							<!-- output directory for the generated report -->
							<outputDirectory>${project.build.directory}</outputDirectory>
							<!-- optional, defaults to outputDirectory if not specified -->
							<inputDirectory>${project.build.directory}</inputDirectory>
							<jsonFiles>
								<!-- supports wildcard or name pattern -->
								<param>**/*.json</param>
							</jsonFiles>
							<!-- optional, defaults to outputDirectory if not specified -->
							<classificationDirectory>${project.build.directory}</classificationDirectory>
							<classificationFiles>
								<!-- supports wildcard or name pattern -->
								<param>sample.properties</param>
								<param>other.properties</param>
							</classificationFiles>
							<parallelTesting>false</parallelTesting>
							<!-- optional, set true to fail build on test failures -->
							<checkBuildResult>false</checkBuildResult>
						</configuration>
					</execution>
				</executions>
			</plugin>

 


	